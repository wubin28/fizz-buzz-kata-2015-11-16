{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"FizzBuzz.java:6: error: cannot find symbol\n        Handler normalNumberHandler = new NormalNumberHandler(null);\n                                          ^\n  symbol:   class NormalNumberHandler\n  location: class FizzBuzz\nFizzBuzz.java:7: error: cannot find symbol\n        Handler buzzHandler = new BuzzHandler(normalNumberHandler);\n                                  ^\n  symbol:   class BuzzHandler\n  location: class FizzBuzz\nFizzBuzz.java:8: error: cannot find symbol\n        Handler fizzHandler = new FizzHandler(buzzHandler);\n                                  ^\n  symbol:   class FizzHandler\n  location: class FizzBuzz\nFizzBuzz.java:9: error: cannot find symbol\n        this.fizzBuzzHandler = new FizzBuzzHandler(fizzHandler);\n                                   ^\n  symbol:   class FizzBuzzHandler\n  location: class FizzBuzz\nHandler.java:1: error: Handler is not abstract and does not override abstract method handle(int) in Handler\npublic class Handler {\n       ^\nHandlerBuzz.java:2: error: constructor Handler in class Handler cannot be applied to given types;\n    public HandlerBuzz(Handler successor) {\n                                          ^\n  required: Handler\n  found: no arguments\n  reason: actual and formal argument lists differ in length\nHandlerFizz.java:2: error: constructor Handler in class Handler cannot be applied to given types;\n    public HandlerFizz(Handler successor) {\n                                          ^\n  required: Handler\n  found: no arguments\n  reason: actual and formal argument lists differ in length\nHandlerFizzBuzz.java:12: error: successor has private access in Handler\n        return successor.handle(number);\n               ^\nHandlerNormalNumber.java:2: error: constructor Handler in class Handler cannot be applied to given types;\n    public HandlerNormalNumber(Handler successor){\n                                                 ^\n  required: Handler\n  found: no arguments\n  reason: actual and formal argument lists differ in length\n9 errors\n","instructions":"Write a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n","FizzBuzzTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class FizzBuzzTest {\n\n    @Test\n    public void should_print_1_if_the_number_is_1() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"1\", fizzBuzz.print(1));\n    }\n\n    @Test\n    public void should_print_fizz_if_the_number_is_3() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"fizz\", fizzBuzz.print(3));\n    }\n\n    @Test\n    public void should_print_buzz_if_the_number_is_5() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"buzz\", fizzBuzz.print(5));\n    }\n\n    @Test\n    public void should_print_98_if_the_number_is_98() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"98\", fizzBuzz.print(98));\n    }\n\n    @Test\n    public void should_print_fizzbuzz_if_the_number_is_15() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"fizzbuzz\", fizzBuzz.print(15));\n    }\n}\n","FizzBuzz.java":"\npublic class FizzBuzz {\n    private Handler fizzBuzzHandler;\n\n    public FizzBuzz() {\n        Handler normalNumberHandler = new NormalNumberHandler(null);\n        Handler buzzHandler = new BuzzHandler(normalNumberHandler);\n        Handler fizzHandler = new FizzHandler(buzzHandler);\n        this.fizzBuzzHandler = new FizzBuzzHandler(fizzHandler);\n    }\n\n    public String print(int number) {\n        String result = null;\n        \n        result = this.fizzBuzzHandler.handle(number);\n\n        if (number % 15 == 0) {\n            result = \"fizzbuzz\";\n        } else if (number % 3 == 0) {\n            result = \"fizz\";\n        } else if (number % 5 == 0) {\n            result = \"buzz\";\n        } else {\n            result = Integer.toString(number);\n        }\n        return result;\n    }\n}\n","Handler.java":"public class Handler {\n    private Handler successor;\n\n    public Handler(Handler successor) {\n        this.successor = successor;\n    }\n\n    public abstract String handle(int number);\n}","HandlerFizzBuzz.java":"public class HandlerFizzBuzz extends Handler {\n    public HandlerFizzBuzz(Handler successor) {\n        super(successor);\n    }\n    \n    @Override\n    public String handle(int number) {\n        if (number % 15 == 0) {\n            return \"fizzbuzz\";\n        }\n\n        return successor.handle(number);\n    }\n}","HandlerBuzz.java":"public class HandlerBuzz extends Handler {\n    public HandlerBuzz(Handler successor) {\n    }\n\n    @Override\n    public String handle(int number) {\n        return null;\n    }\n}","HandlerFizz.java":"public class HandlerFizz extends Handler {\n    public HandlerFizz(Handler successor) {\n    }\n\n    @Override\n    public String handle(int number) {\n        return null;\n    }\n}","HandlerNormalNumber.java":"public class HandlerNormalNumber extends Handler {\n    public HandlerNormalNumber(Handler successor){\n    }\n\n    @Override\n    public String handle(int number) {\n        return null;\n    }\n}"}