{"cyber-dojo.sh":"rm -f *.class\nCLASSES=.:`ls *.jar | tr '\\n' ':'`\njavac -Xlint:unchecked -Xlint:deprecation -cp $CLASSES  *.java\nif [ $? -eq 0 ]; then\n  java -cp $CLASSES org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.....\nTime: 0.038\n\nOK (5 tests)\n\n","instructions":"Write a program that prints the numbers from 1 to 100.\nBut for multiples of three print \"Fizz\" instead of the\nnumber and for the multiples of five print \"Buzz\". For\nnumbers which are multiples of both three and five\nprint \"FizzBuzz\".\n\nSample output:\n\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n... etc up to 100\n","FizzBuzzTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\n\npublic class FizzBuzzTest {\n\n    @Test\n    public void should_print_1_if_the_number_is_1() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"1\", fizzBuzz.print(1));\n    }\n\n    @Test\n    public void should_print_fizz_if_the_number_is_3() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"fizz\", fizzBuzz.print(3));\n    }\n\n    @Test\n    public void should_print_buzz_if_the_number_is_5() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"buzz\", fizzBuzz.print(5));\n    }\n\n    @Test\n    public void should_print_98_if_the_number_is_98() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"98\", fizzBuzz.print(98));\n    }\n\n    @Test\n    public void should_print_fizzbuzz_if_the_number_is_15() {\n        FizzBuzz fizzBuzz = new FizzBuzz();\n        assertEquals(\"fizzbuzz\", fizzBuzz.print(15));\n    }\n}\n","FizzBuzz.java":"\npublic class FizzBuzz {\n    private Handler handlerFizzBuzz;\n\n    public FizzBuzz() {\n        Handler handlerNormalNumber = new HandlerNormalNumber(null);\n        Handler handlerBuzz = new HandlerBuzz(handlerNormalNumber);\n        Handler handlerFizz = new HandlerFizz(handlerBuzz);\n        this.handlerFizzBuzz = new HandlerFizzBuzz(handlerFizz);\n    }\n\n    public String print(int number) {\n        String result = null;\n        \n        result = this.handlerFizzBuzz.handle(number);\n\n        return result;\n    }\n}\n","Handler.java":"public abstract class Handler {\n    protected Handler successor;\n\n    public Handler(Handler successor) {\n        this.successor = successor;\n    }\n\n    public abstract String handle(int number);\n}","HandlerFizzBuzz.java":"public class HandlerFizzBuzz extends Handler {\n    public HandlerFizzBuzz(Handler successor) {\n        super(successor);\n    }\n    \n    @Override\n    public String handle(int number) {\n        if (number % 15 == 0) {\n            return \"fizzbuzz\";\n        }\n\n        return successor.handle(number);\n    }\n}","HandlerBuzz.java":"public class HandlerBuzz extends Handler {\n    public HandlerBuzz(Handler successor) {\n        super(successor);\n    }\n\n    @Override\n    public String handle(int number) {\n        if (number % 5 == 0) {\n            return \"buzz\";\n        }\n        return successor.handle(number);\n    }\n}","HandlerFizz.java":"public class HandlerFizz extends Handler {\n    public HandlerFizz(Handler successor) {\n        super(successor);\n    }\n\n    @Override\n    public String handle(int number) {\n        if (number % 3 == 0) {\n            return \"fizz\";\n        }\n        return successor.handle(number);\n    }\n}","HandlerNormalNumber.java":"public class HandlerNormalNumber extends Handler {\n    public HandlerNormalNumber(Handler successor){\n        super(successor);\n    }\n\n    @Override\n    public String handle(int number) {\n        return Integer.toString(number);\n    }\n}"}